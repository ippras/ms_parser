File Formats

Please note
MS spectral data files
stegration results files

[E==
Please note

The information presented in this appendix is intended to be used by
experienced Pascal programmers. It is not intended to be used by
the casual programmer ang is therefore not as detailed as would be
necessary Tor such a programmer. These file structures are useful
in custom data processing applicstions such as uploading data files
to remote computer systems other than an HP 1000 RTE 6/VM
system

Every attempt has been made to insure the accuracy of the
information presented here. however this does not imply that HP in
any way guarantees this. Although every attempt will be made to
preserve these file Structures, HP reserves the right to modify them
at any tims.

Header Record
512 bytes

Normalization Records
16 at 24 bytes each

Spectral Records
N-Variable Length Records

Directory Records
N at 12 bytes each

File Number : String [3]

File String : String [19]

9

Data Name : String [61]

.

Misc Info : String [61]

Operator : String [29]

Date-Time : String [29]

Instrument Model : String [9]

: String [9]

a

S10 Big

+ String [19]

File Type

+ Integer

Seq Index :

Shortint

ALS Bottle :

Shortint

Replicate

: Shortint

Directory Entry Type

Shortint

Directory Offset

Integer (in Words) [* 1 #]

Data Offset :

Integer (in Words) [* 2 *]

Run Table Offset : Integer {in Words) [Unused]

2 Normalization Records Offset :

Integer (in Words) [* 3 *]

Extra Records

Shortint

Number of Data Records :

In teger

Starting Retention Time

: Integer (in milliseconds)

Ending Retention Time : Integer (in milliseconds)

Maximum Signal : Integer

sieunog alld a

Minimum Signal : Integer

Unused

Normalization record

8

Slap e

Number of Words :

Shortint (inclusive)

Retention Time :

Integer (in milliseconds)

Number of Words

: Shortint (inclusive)

Data Type

+ Shortint

Status Word

: Shortint

Number of Peaks :

Shortint

Unsigned Shortint (mass*28)

Base Peak Abundance :

Shortint

Abu ade

sz Unsigned Shortint (mass*20) |
: Shortint

sz Unsigned Shortint (mass*28)

Abuhidaite +

Shortint

Directory records

Byte
Offset

C] Spectrum Offset : Integer (in Words)

sjelliog aid a

Retention Time : Integer (milliseconds)

2
4
B
8

Total Signal : Integer

16

Access philosophy To illustrate how to access information in the mass spectral data.
Tiles, the following program asks for the name of a mass spectral
‘data file, d the name of the fils that the tabulations wil be sent to.
The prog m then continually asks for a sp L 2
‘procseds to tabulate the spectrum to the utput file. No checks for
fimits are performed, so some caution should be exercised to avoid
tlz access errors.

Pascal [Rev 3.2 8/29/87] ResdSpec.TEXT 2-May-88 11:27:52 Page 1

@ $SYSPROG ONS (for SIZEOF function)
© $DEBUE ONS
8 LINES 43%

BEE

ysprog i= ie tor the s12E0F extension. “3

_———— ETT, §

© PROGRAM Ks Data Files (INPUT, OUTPUT);
ol 0 ee

BE ER TE RE BIRO ERR Cora ous i apc gE =3

1 TYRE

Byte = B .. 255;

Btrina80 = String [88]; (For File Names}
‘Bhertint = -32748 .. SERGE:

‘Unsigned Shortint = a. 65535;

bi This typs Will be used to access the data file Hany
Int_File_Type = FILE OF Shortint:

f¥*= A ‘general’ type for data (and other] file headers)

Header info type = RECORD
Fils mm str
File str
Dats_name
Wisc info
Opzrator
Date_time
Inst_medel
inlet
Method file
File _type
Seq_index
Als, bats l=

st ing 1191; {e.g. GC/MS DATA FILE}

string 1611; (User input name)

String [61]; {User input name}

String [293;

string [29];

string [917 (e.g. 5970 3

String 191; ({=.g. GC,LC, ETC.

String 1191;

Integer;

sharing;

Sharting;

Sharzint; per ALS index 3
{type of dir ents 3

RAE LC LR EE RE Li

o r ent type
Dir_offset
‘Data_offser
Run_Tol_offser
Worm offsst

s
a
1
1
1
1
1
1
1
1
1
1
1
1
1
h
1
1
1
1

BE CH PE TR TY in ETRE TET)

Pascal [Rev 3.2 B/25/871 ReadSpec.TEXT 2-May-88 11:27:52 Page 2

Extra_recards : Shortint; (Number of 256 SYIE

‘Records fol lowing}
Integer; (Number of data recs)
Integer; {Starting ret time 3
Integsr; {Last retention time}
integer; [Maximum dir signal 3
: integer (Minimum dir signal }
END;

Kum records
Start rtime
End _rtime
Max signal
Min signal

a

Ew KC TINT
S1BLLOL &)id

== This type is used te tn out. the rest of the header

info: — - info type;
Filler : PACKED ARRAY
© UT .. (512 - SIZEOF (Header_info_type))]
OF Byte;
END;

{*** This is the normalization record stuff =»)
Norm _rscord type = RECORD
Horm | Mass : Real;
Slope : Real;
Intercept : Real;

END;

Norm record array type = ARRAY ial -. 18]
OF Narm_record type;

iia Abundance is in specizl packed format {powers of 8) *++3
‘Abundance | Rec = PACKED ‘RECORD
© scale : 8 .. 3; (x1, x8, x64, 35123
Msntissz : 8 .. 18383;
END;

Mass Abund Type = PACKED RECORD
Mzss : Unsignsd Shertint;
Abund : Abundance Rec:
ENE;

EC id This is the primary Hass Spectral data record **=}

ie Hata: Ths array [1 .. 2388] of Hass_ bund | Type
in na wey is meant to place a limit an the
nunber of mass spectrzl pesks sny one spectrum

Pascal {Rev 3.2 8/29/87] ReadSpec.TEXT E-Hay-22 11:27:52 Page 3

can contain, this is simply = convenient
number far this example. The real guides
to the number of mess spectral peaks should
B= Num_ Peak: 3}
Spectral Rec = PACKED RECORD.
Num_Werés : Sherine;
Ret LT mg

Data 4 PACKED RREAY 01 .. 20801

OF Mass Abund_ _Type;
END;

{*=* This is what PASCAL c=lls = 'Variant Record’ it ig
used To get around PASCAL's tendency to want to
access files as fixed length records. Spectral
records =rs by nature variable length. In order
to access them from the fils, the data is read as .
SMagaits and. later ceessed as the Spectral record =*=3 O

OF Shorting);
END;

1
1
Es
1
1
1
1
b= 1

*** This is the directory record. Directory entries are
used te provide pseudo-random access te the variable
|sngth spectral records. Each spectrum will have one.
directory sntry. Directory entries are also used to

reconsiruct the total fon chromztogram very quickly *+=)

Directory Entry = ED RECORD

Offset : Integer;
Rer_Time : Integer;
Tat Sig = Threger;

END;

{*** Thic type fs used in the exact s=me way as the Spectral

Pascal [Rav 3.2 O/Z9/E71 Re=cipec. TEXT Z-May-EB 11:27:32 Fags &

138:D
131:0
132:D0

133:D
134:D
135:0

1490-10026

15835: oo
151:0- 10026

152:D- 10826

172:0- 18626

variant, but in this cass for the directory entriss **¥%}
Directory Variant = PACKED RECORD
CASE Boolssn OF
True 3 (Bir + + Bivectory | Entry;
‘False : (Int : PACKED ARRAY
Ho BE siz607 (Directory Entry) DIV 2)
OF Shartintd;
END;

ll ga

Be mmo TaTE Emr i EE a a Ee Le

©: File fi=adsr Type;
1 Spectral Rec;
Integer;
: Int Fila Type;
| 3 Hide,
‘Output File t Text;
Output File Name : Str ing8a :

- SEN a Cp ee

1
1
1 - -
oT — Read Data_Headar ( =_Nan
2 VAR Dota eader : File _fiesder Type);
2
2

go File : FILE OF Fils Header Type;

2 BEGIN (Reed Dots Hesderd
2
{**= NOTE: Because the header starts at word 8 of
‘the file, the file can be opened for
‘mccess as a ‘FILE OF File Header Type!
‘and only the first record read. %%#3
OPEN (#eader_File, File Name);
‘READ (Header Fils, Dats_fesder);
CLOSE (Header Filed;

2 END; (Read Data Header)

7 {r= BE a etesssesscnsesnesonenna}

Pascal [Rev 3.2 8/29/87) ResdSpec. TEXT 2-May-88 11:27:52 Page 5

173:0 | PROCEDURE G2t_Spectrum (VAR pats File
TLD 3 Spectrum Num
173: a ) Dir Start
17:0 z ANYVAR Spectrum
i778

178:0 WAS

179:0 4 Tt

tnt_file Type;
Integer;

Integer; .
Spectral Variant);

179: 2 H Integer;
88:0 -16 2 bir _Entry : Directory Variant;
181:0  -2d 2 Length_In Words : i

182:0  -24 2 This Dir Offset :
183:

180:c BEGIN (Gat Sectrum
185:5 a oo
186:5 *** Calculzte the start of the directsry

18725 entry for this spectrum. Nota, SIZEQF

138:s Feturns bytes, but words (18 bite) are

189:C E ‘nesded, therefore the ‘DIV 21 ==)

198*¢ 2 This 1 pir. Dffger = Dir_Start +

191:¢ : Ctspectrum_ Hum = 1) =

192:C : {SIZEOF (Dirsctory. r Entry) DIV 23);

193:5

19415 **= Bead in the directory entry far nis spectrum.

195:3 Note that the TInt! portion of the record is used
178: For this access to satisfy PASCAL's type matching
187: 2 regyiiements, the 'D portion will be used later +42)
198%c : 5

me toata Fife, Pde freer

{¥** Now sezk to the beginning of this gpactrum record

2s oiven by the directory sntry 2nd read in the

First word to determine the length of this spectrum **23
SEEK ‘(Data File, Dir_Entry.Dir Offset);
READ (Dats. File, Length _In_wWords);

{*** Seck back To the beginning of this spectrum record
2nd read the entire spectrum *=*}
SEEK (Data_Zile, Dir; Entry. ir.0fiset);
FOR 1 := 170 Length_| n_Word
READ (D=t=z File, Soc Erimannt m 1:

END; {Next Spectrum)

Pascal [Rev 3.2 8/29/57] ReadSpec.TEXT 2-May-B8 11:27:52 Page 6

216:0-1B026 1 {ommmmmmm meme
217:0 1 PROCEDURE Tab Spectrum (VAR Spectrum
218:0 : VAR Text File
219:
228:D
221: <4 2 Ti Integer;
2zz=0 ; Index © Integer;
2230-12 2 abundance: Integer;

b 6 Mass Peak Mum : Integer;

BEGIN {Tab Spectrum)

WRTTELN (Text Filed;
WRITELN (Text Fils, ‘Spectrum fetention Time : 1:48,
~~ (Spectrum.Ret Time / 688GB):9:3);

WRITELM (Text File, ‘Number of Peaks : $148,
Spectrum. Hum | Peaks:@);

WEITELN (T=xt Fils, 'Base Posh : ':i8,

© (Spectrum.Base Peak [ 28):8:2);

WREITELN (Text File);

FOR index i= 1 TO & DO
WRITE (Text File, M=ss  Abund®l;
WRITELN (Text Filer
A{==* Spectra AERA Lard hich mass to a
Hass f Peak | um i= ;
:  Spactrum.Num Fasks 20WKT. 1 BO BEGIN
FOR I a= 1 +70 ho Se po

WRITE (Text | file, (Mass / 23: 11:2, (Abundance):8);
END; (With spectrum)

2
z
3
3
&
:
F
&

{==* 1{ four mass sbundancs pairs have
been printed, then skip to 2 new line ***3
Mass Peak Hum := Mass Peak kum + 1;
IF (Mass Peak Num MOD 4) = 3) THEM
WRITELN C(Text_File):
END; {For Index}
WRITELN (Text File);

Paccal (Rev 3.2 8/20/87) Readspec.TEXT 2-Hay-88 11:27:52 Page 7

259=C 2 WRITELW (Text_File);
268:5

281%C 2 END; ({Teb_Spsctrumd
262:5
263:0-18926 1
264:D-18826 1 = ; :
263:D- 18826 1 {xa rrie dine pay aaliseh nbd ns re Ss SS ent
264:C 1 BEGIN {Main}

67:5 .

288:C - gras Ask the ussr for ‘the data file name TT}

269°C MRITE (OUTPUT, 'Data File Name? >> 1);

27etc. READLN (INPUT, Fils Name);

271:3

ere:c 1 (*** Ask the ussr for the output file name mg

Z73*C ¥ MRITE {OUTPUT ‘Output File Name? :

274:t 1 NPRINTER:", or disc file name ‘sg

rs READLN (INPUT, Output File Name);

276:s

2775 A{*¥* Read the file header in order to

218 set the directory affser ===)

275%C 1 Read Dats Header (File Mame, Header);

288-5

28:3 {*** Gpen the deta file #5 3 'FILE OF Shorrint!

282:C 1 for the Read Spectrum procedurs #7}

283 C 1 OPEN (Date File, File Mame;

28h:

285: €*** Open the output tile for write access ***)

288% T 1 REWRITE (Output File, Dutput File Name);

z87is

FE Et |

REPEAT"

Tr psi the user for the Spectrum

number that is to he tabulated EY
WRITE (OUTPUT, ‘Spectrum number to rabul ate? sx};
READLN (INPUT, Spec Num);

IF {Spec Num > B) THEN BEGIN
{**= pead the. destiad spectrum from the Fila #rry
Get_Spectrum (Data_File, Spec Num,
Hesder.Info.Dir Offset, Spectrum);

{*** Tabulste the spectrum to the output file ny

Pascal [Rev 3.2 8/29/87) RsadSpec.TEXT Z-May BE 11:27:52 Page E

Tzb_Spectrum (Spectrum, Output File);

END; (Tf Spec Num}

a

UNTIL {Spec Num <= 8);

CLOSE (OWtR EEERT
‘CLOSE {OQutput_File, YSAVE');

SJEWI0 B[1]

1 END. (Main Program}

Me errors. Noo warnings.
#**=%* Nonstandard language festurss nab] ed mraan

As an example, this program was run on ini file DEMOSCAND
anulated, pro ucing the following output.

Spectrum Retention Time : 4.438
Number of Peaks : 36
Base Peak : 55.48

Hass Apund
“wh. 78 14
51.68 26
55.68 Ef]
58.48 17
83.28 14
76.38 19
7a.18 13
s.95 8

118.75 11

a

Header Record
512 res

Mids Peak Records }
3 Rec/ Pk at 48 bytes each

“Channel Directory Records
34 bytes each

21d

S)BLLIOY

Header record Hezder records for integration results files have the same structure
as the header records for mass spectral de The information

Various Peak Codes (see note 1)

Stop | Start | D | A

Record Type (see note 2)

Record Dependent : Real (see note 3)

Record Dependent : Real (see note 3)

Record Dependent : Real (se= note 3)

Relative Record Number : Integer

Previous Record : Integer

Next Record : Integer

Note 1:

Start i Stop Codes; Other Peak Codes:
88 : Baseline 0 : Distorted
a1 = Valley A& : Aborted
18 : Penetration 0 : Over
11 : Horizontal U : Under
Note 2:
Record Type Values
8 : Extended Peak Information
1 : Extended Peak Start Information
2 : Extended Peak Stop Information
3 : Area Slice Information
4 : Front Shoulder Information
5 : Rear Shoulder Informztion
6 : Not used in Processed Peak Information
7 : Not used in Processed Peak Information
8 : Normal Peak Information
9 : Solvent Peak Information
18 : Tangent Peak Information
11 : Negative Peak Information
12 : Area Sum Peak Information
13 : Not used in Processed Peak Information
14 : Not used in Processed Peak Information
Note 3
Type Real 1 Real 2 Real 3
2] Width Symmetry Baseline
1-2 | Pk Strt/Stp Time | Pk Stri/Stp Level | Baseline Sirt/Sip
3 Slice Start Time Slice Width Slice Area
4-5 Shoulder Time Shoulder Height Unused
8-12 Retention Time Peak Area Peak Height
File Formats

D-13

Channel directories

Byte
oFfeet

Ch Type
Channel Dependent :

Channel Dependent : Re

Unused

Relative Entry Number : Integer

Previous Directory Entry : Integer

Next Directory Entry : Integer

serio san saute isha i FN

Pascal [Rev 3.2 B/29/871 IntPri.TEXT 2-May-88 11:27:04 Fage

1:0 8 SSYSPROS ONS
2: 8 SDEBUS ONS.
3:0 8 SLINES 433

8 PROGRAM Int_Prt (INPUT, QUTFUT);
1 TYPE

Byte = | a .. 255;
Seringlf = String [8e1; ]
Shortint = “32768 .. 3276T;

Flag_Feak_Type =

(Stop Code A, { Defines, 2 and Z bits separately 3
stop Code 8, { any of 4 peak start and stop types J
Start Code A, { 88=B=Baselins, B1=V=vallsy =
start_tods B, { 1B=P=penetration, 1l=H=Horizemtal 3
Distorted, i€ set Tf spiked, missed readings, 2tc J)
Aborted, ed peak is aborzed for whatever resson }.
Under,  Pesk encountered A/D undsrrangs i
over); { Pezk sncountersd A/D overrange

Flag Normal Peak = SET OF Flag_Pask Type;

AR
{ For all peak types the tag byte is a constant, and
{ assumes the fal lowing valuzs:
‘8 = Extended pesk rscord;
81 “Extended peak start info;
92 = Extended pesk end inf;
83 = Area slice record;
84 = Front shoulder record;
85 = Rear shoulder record;
B6 = Ares reject record;
88
89
18
12 =a
1
1% =

1.
1
1
4
1
1
1
1
1
1
1
1
1

1
1
1
g
1
1

RAR a WN)
A NA, A AR bk Bl 0 ld

Pascal [Rsv 3.2 B/29/B71 IntPri TEXT 2-M2y-88 11:27:84 Page 2

ssid
‘Descriptar_Typs = (Extended Fesk_infs,
Extended Peak Stare Indo,
Extended Peak_fnd_ Info,
517 _Info,
Shoulder. Info,

mal_Peck_Info,
Solvent_Pesk_lnfo,
Tangent: Skim _| Peak _Info,
Negative | Peak_Infe,
Area_Sum_Pea K In fo,
Header_lInfo,
Initial ize_Info);

1 TGCResponssErrors = {IntegOridentAborted,
HoSummedPesks,
MNoReferenc eakFound,

Wumba ‘OfFeaks G1 Mex,
Rare gt,

dao I
ExcessHegativelnput,
RezdingsMissed, fhit & 3
aDOverrange, {bit 3 3
Control EventsAborted, {bit 2 3
Rundbartad, {bit 13
ADProblem 3; {eit 8 3

1 TGCErrorSst = Set of TGCResponseErrers;

TGA Pesk Info| Recard:s = RECO Bi;

1
B
1
1
1
1
1
1
1
1
1
1
1
1
J
1
q
1
1
iy!
1
1
1
7
1
1
1
aq
1
1
1
1
1
1
1
1
1
i;
1

cass — + De — oF

Extended Peak _ Info: | {Width :

Pascal [Rev 3.2 8/29/ET1 IntPrt.TEXT 2-May-B8 11:27:84 Page 3

&7:0

ss:

Symmetry 3 Real CE. .
Bassline : Real); (height unite)

Extended_Peak_Start_Infe : (Time Peak Start : Real;
Level Peak Start : Real;
Baseline Peak Start : Real);

Peak End info : (Tims Peak End
Level Peak

Basel fns_Peak End 1 Resl)

Slice _Infa = (Start Tims : Real;

slice Width : Real;
Slice Ares 1 Real);

Front_Shoulder_Info : (F_Shoulder Time : Resi;
f_shoulder_ Height : Real);

Rear_Shoulder_Infe : (2_shoulder_Time : Real;

#_Shoulder Height : Real};
Normal_Peak_lnfo : (Retention Time : R
Area
Height
Eolvent_Pesk_Info : (Rezention_Time_$ : Real;
) Ares 8 : Resi;
Height § : Real);

Tangent Skim Peak _Info : (Retention Time T : Resl;

Area T =z Real;
H

Height _T : Resi);

Negative Peak Info + (Retention Time No: Resi:
Real;
Real;

‘Area _sum_Peak_Info :

Hesder_Info : (No Records

: Integer;
Run Time

: Real;

Pascal [Rev 3.2 8/29/87 IntPrt.TEXT 2-May-88 11:27:84 Page &

Errors : TECErrarSet;
) Humber : Shortint)
END;

EE

Mode Type = (Null _Ch, Sim, 8im, Tim, Complex Ch);

Channe!

{*** Processed Peak Record »¥w)
‘Prac Pk Type = RECORD
~ Px_Info : TGA_Pesk Info Record;
Rel_Rec_Mum : Integer;
Frav_Rec : Integer;
Wext Rec : Integer;
END;
Proc_Pk_File_Type = FILE OF Proc_Pk_Type;

(*** Frocessad Paak Channel Di rectory TFT)
Directory ; Record Type = RECORD

Last Rec : Integer;
Num Rec : Integer;
END;

1
1
¥
.
Aig
1
1
1

Directory | File Type = FILE OF. Direstary Bacord. i Type; -
Directory Mem Ptr = “Directory Mem Type:
RT RREOTY New Type = RECORD

Bir_tnfe : virectory_ Record Type;

Ral RE

1 £**% File Header Types #4)
1 Header into o_typs = RECORD
i Filz num str: String (3i:
File str + String [191; (e.g. GC/MS DATA.

Pascal [Rev 3.2 B/2¥/871 IntPrt.TEXT Z-May-B8 11:27:04 Page 5
173:0: Datz_name
: Misc_info
Operator
Dats time
‘Inst model
‘Inlet
Method Tile

: String $61); (User input name}
|S
File type : ink

string 511; (User input name)

String [293;

String [291; )

String (71; (e.g. 5978 ¥

Bring 1; {e.g. GC LE, ETE.

ally ad

SELLY

Shorting

 Shortint;

¢ Intsger;

¢ Integer;
Run a otfset Integer;
Norm offset ‘Integer;
Extrz records © Shortint; (Number of 256 BYTE

Records following}
Mum records: Integer; (Number of data recs)
Start_rtime Integer; {Starting ret tims J}
End_rrime © Integer; {last retention time}
Mzx_signal Integer; (Maximum dir signal 3
Hin signal : Integer {Minimum dir signal }
END;

Header Rac. Type = PACKED RECORD
nfs 1 Header_infe _type;
Filler 1 PACKED ARRAY
rv .. £512 =
S1ZE0F (Ke=der info_type)dl OF Byte;
po EO ERE J
Header File Typs = FILE OF Hesder Rec Type;

£*** 1Fullt Peak record, f.z. all possible information ***3
‘Peak_Rec = RECORD

{*** Channel Information ***3
 Ch_str : String [9];
Lou Mass : Real;

High_Mase : Re

(*** Normal Pesk Information *++}
‘Ret Time : Real;

Pascel [Rev 3.2 8/29/87] IntFri.TEXT 2-M=y-38 11:27:84 Page 6

216: 1 Area: Real;
27:0 3 Height + Real;

Zig: 1 Codes : string [51

*** Extended Information **%)
Width : Resi;
Symmetry : Real;
Bassline : Real;

Marker Type = (Base Line, Valley, Penetration, Horizontal):
Boundary Type = (Start, Stop); ®
Descriptor Set = SET OF Descriptor Type;

CONST

‘Primary Pesk Infa = Descriptor Set MMormal

Header_Rec Type;
Directory Mem Perry
Directary Mem Ptr;
1 String86;
Integer;
: Directory Mem Fr;

Pascal (Rev 3.2 B/29/871 IntPrt.TEXT

259:0
268:D0
261:0
262:0
263:0

2584:0
265:0
266:0
267:8
are:s

“742
“1448
“1449
-1454
-2158
-2248
-2322

-2322

EF SY TV RP PP PV FR NR WY

2 Pe start Rec
© 2 Bir Start Rec

2-May-BB 11:27:84 Page 7

.
1

1

1

i SEE Ee

1 Proc Pk _File oc Pk_Fils_Typs;

1 Int_File Name

1 output File Name

BE eT FE of ES |

1 PROCEDURE Add Dir_to List (Dir_Ptr : Directory Mem Peri;

2 BEGIN (Add Oir_to List)

(5d Initialize Entry wey
Dir Prt Mext | pir = NIL;

¢*** Check it First Entry aac
LF (Ch_| Head <= WIL) THEW BEGIN

{FE Attach End of Directory List to Hew Entry ary
=] _Tail®.Next_ Dir = Dir Por;

{=== adjust Directory List Tail Ptr wo
Ch_Tail == Ch_Tail™.Mext Bir;

END ELSE BEGIN

Ch esd 5= bir Ptr;
Ch_Tail Hd pir Por;

; (Add to Dir _to_Listd

LE PE PRR

1 PROCEDURE Set Up File (VAR Prac Pk File : Proc Pk Fife Type:
2 VAR File Name : String);

2 VAR

Integer;
Integer;

STELIIO |

Pascal [Rev 3.2 8/29/87] IntPri.TEXT 2-May-88 11:27:04 Page 8

2

2

2 : 5: In
2 Header Filz 1 Head i152

2 Directory file : Directory 1 Hie: Tyme:
2
2

BEGIN {Sst Up Filed

Ch_Head := NIL;
Ch_Tail == NIL;

3 =* Open File as Header, Extract Record Positions *w+)
OPEN. (Header Fils, File Named};
READ {H#=zacsr File, Header);

ERO

WITH Header. Info oo BEGIN
PP_Start Rec : Ee T;
Dir Start Rec i= bir g fast;

END; (With Keader)

CLOSE (Header Fils, 'SAVE');

ECRCACS

OPEN (Directory File, File Name);
SEEK (Dirsctory File, Dir. Start Rec);

Es

WHILE NOT ECF iBirsctory_ File} DOD BEGIN
READ (Directory File, oir Rec);
NEW (Dir Perry;
WITH pir i Per” DO SEGTH
Bir Info i= ol

| M : (ROUND AH Mass + 200) 7 26;
END; with Dir _tnfa}
END; {With Dir Pred
Add | Dir to | List tir Ptr;
END; twnils Not EOF}

3 :
3
by
4
5
5
2
]
3

CLOSE (Riractory File);
OPEN (Proc Pk File, File Name);

pe

ra

END; {Set _Up Filed

Pesce! [Rev 5.2 8/25/87 IntPre.TEXT 2-May-88 11:27:84 Page §

345:8
ET ERR
3L7:D 1 FUNCTION Boundary _Con
LE:D 2

[ 348:D 2
358:5

R58:

352:0 2 BEGIN (Soundary Condition)
35400 CASE Soundary OF
335% tart : IF (Start_Cods A IN Flag) AND
3%6:C t5tart_Code 3 IN Flag) THEW
3577C ‘Boundary_Condition := Horizontal
358:0 ELSE
Eyed IF (Start _Cod= A IN Flag) THEM
3s0%C ndary_Condition i= Penetration
36:0 :
362%C TF (5tart_Cede 5 14 Flag) THEW
363*C ‘Boundary. condition += val ey
364: ELSE:
345°C Boundary Condition := Base Line;
36&:0 oo B

@® 3a7eC Stop : IF (Stop Code A IN Flag) AND
368:¢ (Stop Code & IK Fiag) THEN

Boundary Condition := Horizontal
ELSE
IF {Stop Code AIH Else) THEN
‘Boundary_ Conditien := Penetratien
ELSE
IF (8 ode B IK Fiag) THEN
Boundary _| Condition = Valley
ELSE
Boundary Condition = Ba

Lins;

END;

LR RE BY a ll To UT J = SV BE TV I i I CT

END; {Boundary _Conditiam)

EE Hl LE 1

® ELEH ¥ 1 PROCEDURE Extract Codes (VAR Proc Pk : Proc Pk Type;
385:0 2 VAR Pk_Tyse : String);
3B6:%

2 VAR
Pascal [Rev 3.2 B8/29/871 ImtPre.TEXT 2-Msy-88 11:27:04 Page 18

“2 2 Index : Soundary Type;

2 BEGIN (Extract Pk Info}

WITH Prec Pk.Pk_Info DO
1F Peak Type IN Primary Peak Info THEN BEGIN

' EC ion (Flag § Peak, x) Of
| gt Fk Type i= Pie_ Type - Bs
Valley : Pk_Type : = Fk Type = yi
Benstration : Pk. _Type = PE Type + pry
Worizeatal = Dk _Typs : i= Rid Type: =f Airy
‘END;

CASE Pesk_Type OF
Normal _Pesk_Info : Pk _Typs i= Pk_Type + * %;
Solvent P=zk_[nfo : Pk_Type i= Pk Type + 151;
m | peak Info : + Pk _Typs i= Pk Type + 'T1;
Ares: Sum_Peak_ Info : Pk Type : = Bk_Type + +;
OTHERWISE
END; {Csse Peak Type)

¢ Ew: af ektyee
2 EKD; {Extract Pk_Info}

Lom EE a
1 PROCEDURE Write Peak_to_File (VAR Text File : Text;
2 VAR Peak : Peak Rec);

2 BEGIN {Mrite Peak to File}

2 WITH Pesk DO BEGIN

3 WRITELN (Text File, Ret_Time:8:3, Ch_Str:18, * !,
= Low  Mass:0:2, "tog !, High Mase:8:F,

3 Codes: |, Codes: 3 N
3 © Art, AreatfiB, ' Ht: ‘, Height:8:8);

a These feature are not currently nabl 3
thay Will contain valuss of zero, therefor:

Pascal [Rev 3.2 8/29/87] IntPrt.TEXT 2-May-88 11:27:86 Page 11
don't print them *=*}
Foc d Width:5:3,
Bymmesry:3:3, :
‘Basel ine:B:8, ==)
WRITZLN (Text File,

' start Time: !, Start Time:8:3,
Start rgabhadl !, Start_Basel ine:

END; {With Paszk}
WRITELN (Text_File};

7 En; {Write Peak to File}

£- srsrmarsanan Itoi Lom a

Mein Program

[=ememmmeranaaaa seme rmss sans

1 BEGIN {Main Program

{"** Ask ths user tor ths intsgration results file +a
WRITE couTPUT, 'Integratien results file? EEE 3;
READLN (INPUT, Int_File Name);

{*** Ask the user for the output destination file *==3
WRITE (OUTPUT, ‘Output file name? !,
*(UCONSOLE:", “PRINTER:", or file name) =» '3;
READLN (INPUT, Output File Name);
REWRITE (Text File, Output Fils Name);

Index := B;

Set _Up | File (proc | Fk File, Ine File Name);
First Time := Tru

Currenz Dir := Ch_Head;

WHILE (Current Dir <= NIL) DD BEGIN

Psscsl [Rev 3.2 8/29/87) IntPri.TEXT 2-Msy-88 11:27:84 Page 12

472eC
475°C
TET
LTT
478%C

2 WITH Current_| Dirt. Dir Inte.ch_ Desc DO BEGIN

3

4

&

4
sore 4

4

3

3

3

CASE th Time oF
TOTAL 108%;
tan RANGE;

Laie
Lazrc
Lg3:C
GBh4:S

END; ten Current. oir r3
Peak. Low Hass := L
Pesk. High Mass 1=

END; With current iry

Curren: Rec i= Current DTr*.Dir_Info.First Rec;

tH

WHILE {Currsnt Rec > 0) DO BEGIN

SEEK tProc_Pk_File, Current Rec);
READ (Proc_Pk_File, Proc Pk);

WITH Proc_Pk.Pk_Info DO.

CASE Pesk Type OF
Extended Peak_Infe :
Ese
{*** This record types is not currently
=znabi ad, these values will be; 260 iid
Peak Width =

Extended Peek Start Info :
BEGIN
Pesk.Start_Time := Time Pask Start;
Prak.Start Szssline := Bazeline_peak_start;
Peak.Start Level z= Level | Pezk Start;
END;

Extended Pezk_End_Info :
BEGIN
Peak.tnd Tine := Time Peak End;

Pascal [Rev 3.2 8/29/87] IntPrt.TEXT 2-May-88 11:27:84 Page 13

(=*= Lost record for this peak,
‘so print full peak entry ***}
Write Peak to File (Text_File, Peek);
END;

wana

a

Hormal Peak _1nfo,

gent im_Peak_Infc ,
Neg tive Peak Info ”
Area Sum_ Peak_ Info :

BEGIN

SET Ee To

wn an

f*** Initistize variables For next peak ***}
Penk Width z= 8:
Peak.Symmetry i= 8;

Pezk.Baselinz := 8;

Peak.Start Time := 8;

Peak.Start Baseline :

oid Start, cham) 3; a=

RT RT RR TR

Peak. Height i= 8;

Extract_Codss (Proc Pk, Peak.Codes);
Peak.Ret Time := Retention Time;
Peak. Area r= Arss;
‘Peak.Helght := Height;

END;

5
=
5
5
5

OTHERWISE
fren Do Nothing ese
END; {Case Flag Pk}

If (ourrent Ree <= Current Dir~.Dir_Info.last Rec) THEN
Current Rec := Current Rec = 1

ELSE
current Rec i= B

END; (While Current Rec)

Pascal [Rev 3.2 8/29/71 TntPrr.TEXT Z-May-88 11:27:04 Page 14

‘Current Dir i= Current Dir.Next bir;
END; {while Current Dir}
CLOSE (Text File, 'SAVE'};
TR
WRTTELN (OUTPUT, 'Completed... ');

1 ENB. (Main Program)

No ‘arrars. No warnings.
®WE*F Honstendsrd |=nguage features enabled S=Eex

‘As an example, this program was run on the integration results data

5) 6.184 SINGL Lom 184.88 te 164.88 Co

Lo
Start Time: 6.894 Start 8 a
End Tine: 6.391 End | 8

6.168 SINGL [ON 165.88 to 185.80 Codes: 88 A: 3218 Ht: 135
‘Start Time: 6.888 Start Baseline: & Start Laval: 8
End Time: 6.363 End Baseline: 5 :

